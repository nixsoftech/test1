ansible-playbook -i /etc/ansible/hosts os_upgrade_an11.yml -v
Using /etc/ansible/ansible.cfg as config file

PLAY [Upgrade Ubuntu from 18.04 to 20.04 and then to 22.04] **************************************************************

TASK [Gathering Facts] ***************************************************************************************************
ok: [10.13.0.81]

TASK [Check if reboot is required] ***************************************************************************************
ok: [10.13.0.81] => {"changed": false, "stat": {"exists": false}}

TASK [Reboot if required] ************************************************************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Check if lxd is installed] *****************************************************************************************
ok: [10.13.0.81] => {"changed": false, "cmd": ["dpkg", "-l", "lxd"], "delta": "0:00:00.015555", "end": "2025-04-28 13:44:50.952196", "failed_when_result": false, "msg": "non-zero return code", "rc": 1, "start": "2025-04-28 13:44:50.936641", "stderr": "dpkg-query: no packages found matching lxd", "stderr_lines": ["dpkg-query: no packages found matching lxd"], "stdout": "", "stdout_lines": []}

TASK [Remove lxd package if installed] ***********************************************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Clean up lxd residual files if package was removed] ****************************************************************
skipping: [10.13.0.81] => (item=/var/lib/lxd)  => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/lxd", "skip_reason": "Conditional result was False"}
skipping: [10.13.0.81] => (item=/var/snap/lxd)  => {"ansible_loop_var": "item", "changed": false, "item": "/var/snap/lxd", "skip_reason": "Conditional result was False"}

TASK [Get current OS release] ********************************************************************************************
ok: [10.13.0.81] => {"changed": false, "cmd": ["lsb_release", "-sr"], "delta": "0:00:00.023197", "end": "2025-04-28 13:44:51.357667", "rc": 0, "start": "2025-04-28 13:44:51.334470", "stderr": "", "stderr_lines": [], "stdout": "20.04", "stdout_lines": ["20.04"]}

TASK [Restrict apt to amd64 architecture] ********************************************************************************
ok: [10.13.0.81] => {"changed": false, "checksum": "fed96babd26d2a80f06eb973d186bc204eee4787", "dest": "/etc/apt/apt.conf.d/99no-i386", "gid": 0, "group": "root", "mode": "0644", "owner": "root", "path": "/etc/apt/apt.conf.d/99no-i386", "size": 27, "state": "file", "uid": 0}

TASK [Check for running dpkg or apt processes before removing i386 packages] *********************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.011379", "end": "2025-04-28 13:44:52.347368", "rc": 0, "start": "2025-04-28 13:44:52.335989", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before removing i386 packages] **************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before removing i386 packages] **************************************************************
changed: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": true, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
changed: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": true, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
changed: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": true, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [List installed i386 packages] **************************************************************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "dpkg-query --show --showformat='${Package}\\n' '*:i386' || true", "delta": "0:00:00.015568", "end": "2025-04-28 13:44:53.656469", "failed_when_result": false, "rc": 0, "start": "2025-04-28 13:44:53.640901", "stderr": "", "stderr_lines": [], "stdout": "gcc-8-base\nlibc6\nlibgl1-mesa-dri\nlibglib2.0-0\nlibgssapi-krb5-2\nlibogg0\nlibpulse0\nlibsane1\nlibsasl2-modules\nlibsensors4\nlibssl1.1\nlibwrap0\nlibxext6\nlibxinerama1\nlibxss1\nlibxxf86vm1", "stdout_lines": ["gcc-8-base", "libc6", "libgl1-mesa-dri", "libglib2.0-0", "libgssapi-krb5-2", "libogg0", "libpulse0", "libsane1", "libsasl2-modules", "libsensors4", "libssl1.1", "libwrap0", "libxext6", "libxinerama1", "libxss1", "libxxf86vm1"]}

TASK [Remove i386 packages] **********************************************************************************************
[WARNING]: Consider using the apt module rather than running 'apt-get'.  If you need to use command because apt is
insufficient you can add 'warn: false' to this command task or set 'command_warnings=False' in ansible.cfg to get rid of
this message.
changed: [10.13.0.81] => {"changed": true, "cmd": "apt-get purge -y --force-confdef --force-confold $(dpkg-query --show --showformat='${Package}\\n' '*:i386') || true", "delta": "0:00:00.022927", "end": "2025-04-28 13:44:54.003771", "rc": 0, "start": "2025-04-28 13:44:53.980844", "stderr": "E: Command line option --force-confdef is not understood in combination with the other options", "stderr_lines": ["E: Command line option --force-confdef is not understood in combination with the other options"], "stdout": "", "stdout_lines": []}

TASK [Disable i386 architecture] *****************************************************************************************
fatal: [10.13.0.81]: FAILED! => {"changed": true, "cmd": ["dpkg", "--remove-architecture", "i386"], "delta": "0:00:00.013123", "end": "2025-04-28 13:44:54.350550", "msg": "non-zero return code", "rc": 2, "start": "2025-04-28 13:44:54.337427", "stderr": "dpkg: error: cannot remove architecture 'i386' currently in use by the database", "stderr_lines": ["dpkg: error: cannot remove architecture 'i386' currently in use by the database"], "stdout": "", "stdout_lines": []}
...ignoring

TASK [Ensure focal sources are configured] *******************************************************************************
ok: [10.13.0.81] => {"changed": false, "checksum": "3473a629a12004ecb90d953d6c32ef83e7c5ecce", "dest": "/etc/apt/sources.list", "gid": 0, "group": "root", "mode": "0644", "owner": "root", "path": "/etc/apt/sources.list", "size": 218, "state": "file", "uid": 0}

TASK [Remove external sources] *******************************************************************************************
ok: [10.13.0.81] => (item=microsoft.list) => {"ansible_loop_var": "item", "changed": false, "item": "microsoft.list", "path": "/etc/apt/sources.list.d/microsoft.list", "state": "absent"}
ok: [10.13.0.81] => (item=bionic.list) => {"ansible_loop_var": "item", "changed": false, "item": "bionic.list", "path": "/etc/apt/sources.list.d/bionic.list", "state": "absent"}

TASK [Disable AppStream to avoid appstreamcli error] *********************************************************************
ok: [10.13.0.81] => {"changed": false, "path": "/etc/apt/apt.conf.d/50appstream", "state": "absent"}

TASK [Check for running dpkg or apt processes before removing problematic packages] **************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.011334", "end": "2025-04-28 13:44:56.198772", "rc": 0, "start": "2025-04-28 13:44:56.187438", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before removing problematic packages] *******************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before removing problematic packages] *******************************************************
ok: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
ok: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
ok: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [Remove problematic packages] ***************************************************************************************
changed: [10.13.0.81] => {"changed": true, "cmd": "apt-get purge -y --force-confdef --force-confold python3-msgpack python3-psutil python3-tornado python3-zmq libapt-pkg-perl debconf-utils python-apt || true", "delta": "0:00:00.006186", "end": "2025-04-28 13:44:57.405988", "rc": 0, "start": "2025-04-28 13:44:57.399802", "stderr": "E: Command line option --force-confdef is not understood in combination with the other options", "stderr_lines": ["E: Command line option --force-confdef is not understood in combination with the other options"], "stdout": "", "stdout_lines": []}

TASK [Check for running dpkg or apt processes before updating package cache] *********************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.010704", "end": "2025-04-28 13:44:57.753566", "rc": 0, "start": "2025-04-28 13:44:57.742862", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before updating package cache] **************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before updating package cache] **************************************************************
ok: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
ok: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
ok: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [Update package cache] **********************************************************************************************
changed: [10.13.0.81] => {"cache_update_time": 1745828104, "cache_updated": true, "changed": true}

TASK [Check for running dpkg or apt processes before installing python3-apt] *********************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.011220", "end": "2025-04-28 13:45:14.855196", "rc": 0, "start": "2025-04-28 13:45:14.843976", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before installing python3-apt] **************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before installing python3-apt] **************************************************************
ok: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
changed: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": true, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
ok: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [Install python3-apt] ***********************************************************************************************
changed: [10.13.0.81] => {"changed": true, "cmd": "apt-get install -y --force-confdef --force-confold python3-apt || true", "delta": "0:00:00.005541", "end": "2025-04-28 13:45:16.109588", "rc": 0, "start": "2025-04-28 13:45:16.104047", "stderr": "E: Command line option --force-confdef is not understood in combination with the other options", "stderr_lines": ["E: Command line option --force-confdef is not understood in combination with the other options"], "stdout": "", "stdout_lines": []}

TASK [Check for running dpkg or apt processes before fixing broken dependencies] *****************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.010639", "end": "2025-04-28 13:45:16.465762", "rc": 0, "start": "2025-04-28 13:45:16.455123", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before fixing broken dependencies] **********************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before fixing broken dependencies] **********************************************************
ok: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
ok: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
ok: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [Fix broken dependencies if needed] *********************************************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Check for running dpkg or apt processes before cleaning up package state] ******************************************
ok: [10.13.0.81] => {"changed": false, "cmd": "ps aux | grep -E '[d]pkg|[a]pt' || true", "delta": "0:00:00.011174", "end": "2025-04-28 13:45:17.810250", "rc": 0, "start": "2025-04-28 13:45:17.799076", "stderr": "", "stderr_lines": [], "stdout": "", "stdout_lines": []}

TASK [Kill running dpkg or apt processes before cleaning up package state] ***********************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before cleaning up package state] ***********************************************************
ok: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "path": "/var/lib/dpkg/lock-frontend", "state": "absent"}
ok: [10.13.0.81] => (item=/var/lib/apt/lists/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/apt/lists/lock", "path": "/var/lib/apt/lists/lock", "state": "absent"}
ok: [10.13.0.81] => (item=/var/cache/apt/archives/lock) => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "path": "/var/cache/apt/archives/lock", "state": "absent"}

TASK [Clean up package state] ********************************************************************************************
changed: [10.13.0.81] => {"changed": true, "cmd": "apt-get autoremove -y --force-confdef --force-confold && apt-get autoclean || true", "delta": "0:00:00.005594", "end": "2025-04-28 13:45:19.041783", "rc": 0, "start": "2025-04-28 13:45:19.036189", "stderr": "E: Command line option --force-confdef is not understood in combination with the other options", "stderr_lines": ["E: Command line option --force-confdef is not understood in combination with the other options"], "stdout": "", "stdout_lines": []}

TASK [Check for running dpkg or apt processes before dist-upgrade for 18.04] *********************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Kill running dpkg or apt processes before dist-upgrade for 18.04] **************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Remove dpkg lock files before dist-upgrade for 18.04] **************************************************************
skipping: [10.13.0.81] => (item=/var/lib/dpkg/lock-frontend)  => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/dpkg/lock-frontend", "skip_reason": "Conditional result was False"}
skipping: [10.13.0.81] => (item=/var/lib/apt/lists/lock)  => {"ansible_loop_var": "item", "changed": false, "item": "/var/lib/apt/lists/lock", "skip_reason": "Conditional result was False"}
skipping: [10.13.0.81] => (item=/var/cache/apt/archives/lock)  => {"ansible_loop_var": "item", "changed": false, "item": "/var/cache/apt/archives/lock", "skip_reason": "Conditional result was False"}

TASK [Perform dist-upgrade for 18.04] ************************************************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Check if reboot is required after dist-upgrade for 18.04] **********************************************************
skipping: [10.13.0.81] => {"changed": false, "skip_reason": "Conditional result was False"}

TASK [Reboot after dist-upgrade for 18.04 if required] *******************************************************************
fatal: [10.13.0.81]: FAILED! => {"msg": "The conditional check 'reboot_required_dist_18_04.stat.exists' failed. The error was: error while evaluating conditional (reboot_required_dist_18_04.stat.exists): 'dict object' has no attribute 'stat'\n\nThe error appears to be in '/etc/ansible/playbook/os_upgrade_an11.yml': line 347, column 7, but may\nbe elsewhere in the file depending on the exact syntax problem.\n\nThe offending line appears to be:\n\n\n    - name: Reboot after dist-upgrade for 18.04 if required\n      ^ here\n"}

PLAY RECAP ***************************************************************************************************************
10.13.0.81                 : ok=27   changed=8    unreachable=0    failed=1    skipped=15   rescued=0    ignored=1
