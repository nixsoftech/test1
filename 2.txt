- block:
    - name: Configure focal sources
      ansible.builtin.copy:
        content: |
          deb [arch=amd64] {{ repo_url }} focal main universe
          deb [arch=amd64] {{ repo_url }} focal-updates main universe
          deb [arch=amd64] {{ repo_url }} focal-security main universe
        dest: /etc/apt/sources.list

    # New APT cache handling with retries
    - name: Force remove apt locks
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/apt/lists/lock
        - /var/lib/dpkg/lock
        - /var/cache/apt/archives/lock

    - name: Update package cache (with retries)
      ansible.builtin.command: apt-get update
      register: apt_update
      until: apt_update.rc == 0
      retries: 5
      delay: 10
      ignore_errors: yes

    - name: Full system upgrade
      ansible.builtin.command: |
        apt-get dist-upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
      environment:
        DEBIAN_FRONTEND: noninteractive

    - name: Check if reboot needed after updates
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: pre_upgrade_reboot

    - name: Reboot if required before upgrade
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
      when: pre_upgrade_reboot.stat.exists

    # Existing upgrade task
    - name: Run release upgrade
      ansible.builtin.shell: |
        set -o pipefail
        yes '' | do-release-upgrade \
          -f DistUpgradeViewNonInteractive \
          --frontend=NonInteractive
      args:
        executable: /bin/bash
      environment:
        DEBIAN_FRONTEND: noninteractive
        UCF_FORCE_CONFFNEW: 1
      async: "{{ upgrade_timeout }}"
      poll: 15
      register: upgrade_result
      changed_when: 
        - upgrade_result.rc == 0
        - "'System upgrade is complete' in upgrade_result.stdout"

  when: ubuntu_version.stdout == "18.04"
