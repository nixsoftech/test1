---
- name: Ubuntu Upgrade with Comprehensive Error Handling
  hosts: all
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    repo_url: "http://10.13.0.88:8080/ubuntu"
    reboot_timeout: 1800  # 30 minutes
    upgrade_timeout: 14400  # 4 hours

  tasks:
    # ========== INITIAL SYSTEM PREPARATION ==========
    - name: Gather facts
      ansible.builtin.setup:

    # ========== VALIDATE REPOSITORY ==========
    - name: Check repository accessibility
      ansible.builtin.uri:
        url: "{{ repo_url }}"
        method: HEAD
        status_code: 200
      register: repo_check
      ignore_errors: yes

    - name: Fail if repository is inaccessible
      ansible.builtin.fail:
        msg: "Repository {{ repo_url }} is inaccessible. Check network or server status."
      when: repo_check.status != 200

    - name: Clean APT cache if corrupted
      ansible.builtin.command: apt clean
      ignore_errors: yes
      when: ansible_distribution == "Ubuntu"

    - name: Remove stale APT lists
      ansible.builtin.file:
        path: /var/lib/apt/lists
        state: absent
      when: ansible_distribution == "Ubuntu"

    - name: Recreate APT lists directory
      ansible.builtin.file:
        path: /var/lib/apt/lists
        state: directory
        mode: '0755'
      when: ansible_distribution == "Ubuntu"

    # ========== LXD REMOVAL ==========
    - name: Remove LXD components
      block:
        - name: Remove LXD (APT)
          ansible.builtin.apt:
            name: lxd
            state: absent
            purge: yes
          register: apt_lxd_removal
          ignore_errors: yes

        - name: Remove LXD (Snap)
          ansible.builtin.shell: |
            snap remove --purge lxd
          register: snap_lxd_removal
          ignore_errors: yes

        - name: Clean LXD files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - /var/lib/lxd
            - /var/snap/lxd
            - /etc/lxc

      rescue:
        - name: Log LXD removal failure
          ansible.builtin.debug:
            msg: "LXD removal failed, continuing anyway"

    # ========== SYSTEM STABILIZATION ==========
    - name: Fix broken packages
      ansible.builtin.apt:
        update_cache: yes
        autoclean: yes
        autoremove: yes
        fix_broken: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      register: apt_fix
      ignore_errors: yes

    - name: Log APT fix issues
      ansible.builtin.debug:
        msg: "APT fix failed: {{ apt_fix.msg | default('Unknown error') }}"
      when: apt_fix.failed | default(false)

    # ========== INSTALL ESSENTIAL UPGRADE DEPENDENCIES ==========
    - name: Install expect package
      ansible.builtin.apt:
        name: expect
        state: present
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      register: apt_expect
      ignore_errors: yes

    - name: Log expect install issues
      ansible.builtin.debug:
        msg: "Expect install failed: {{ apt_expect.msg | default('Unknown error') }}"
      when: apt_expect.failed | default(false)

    - name: Install essential upgrade dependencies
      ansible.builtin.apt:
        name:
          - python3-distupgrade
          - ubuntu-release-upgrader-core
          - update-manager-core
        state: present
        update_cache: yes
      environment:
        DEBIAN_FRONTEND: noninteractive
      register: apt_install
      ignore_errors: yes

    - name: Log APT install issues
      ansible.builtin.debug:
        msg: "APT install failed: {{ apt_install.msg | default('Unknown error') }}"
      when: apt_install.failed | default(false)

    - name: Fail if dependencies could not be installed
      ansible.builtin.fail:
        msg: "Failed to install essential upgrade dependencies. Check APT configuration and repository."
      when: apt_install.failed | default(false) or apt_expect.failed | default(false)

    # ========== DISABLE THIRD-PARTY REPOSITORIES ==========
    - name: Disable third-party repositories
      ansible.builtin.shell: |
        find /etc/apt/sources.list.d/ -type f -name "*.list" -exec mv {} {}.disabled \;
      args:
        executable: /bin/bash
      ignore_errors: yes

    # ========== PRECONFIGURE DEBCONF ==========
    - name: Preconfigure debconf to avoid prompts
      ansible.builtin.debconf:
        question: "{{ item.question }}"
        vtype: "{{ item.vtype }}"
        value: "{{ item.value }}"
      loop:
        - { question: 'grub-pc/grub2/force_bad_path', vtype: 'boolean', value: 'true' }
        - { question: 'postfix/main_mailer_type', vtype: 'string', value: 'No configuration' }
        - { question: 'grub-pc/grub2/update_grub', vtype: 'boolean', value: 'false' }
      ignore_errors: yes

    # ========== RELEASE UPGRADE CONFIGURATION ==========
    - name: Configure release upgrades policy
      ansible.builtin.copy:
        content: |
          [DEFAULT]
          Prompt=lts
        dest: /etc/update-manager/release-upgrades
        mode: '0644'

    - name: Configure dpkg options
      ansible.builtin.copy:
        content: |
          Dpkg::Options {
             "--force-confdef";
             "--force-confold";
             "--force-overwrite";
          }
        dest: /etc/apt/apt.conf.d/99dpkg-options
        mode: '0644'

    # ========== 18.04 → 20.04 UPGRADE PATH ==========
    - block:
        - name: Update package cache
          ansible.builtin.apt:
            update_cache: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_update
          ignore_errors: yes

        - name: Log APT update issues
          ansible.builtin.debug:
            msg: "APT update failed: {{ apt_update.msg | default('Unknown error') }}"
          when: apt_update.failed | default(false)

        - name: Upgrade all packages
          ansible.builtin.apt:
            upgrade: dist
            force_apt_get: yes
            dpkg_options: 'force-confdef,force-confold,force-overwrite'
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_upgrade
          ignore_errors: yes

        - name: Log APT upgrade issues
          ansible.builtin.debug:
            msg: "APT upgrade failed: {{ apt_upgrade.msg | default('Unknown error') }}"
          when: apt_upgrade.failed | default(false)

        - name: Check if reboot is required
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_required

        - name: Reboot if required
          ansible.builtin.reboot:
            reboot_timeout: "{{ reboot_timeout }}"
          when: reboot_required.stat.exists or apt_upgrade.changed

        - name: Configure focal sources
          ansible.builtin.copy:
            content: |
              deb [arch=amd64] {{ repo_url }} focal main universe
              deb [arch=amd64] {{ repo_url }} focal-updates main universe
              deb [arch=amd64] {{ repo_url }} focal-security main universe
            dest: /etc/apt/sources.list

        - name: Update package cache after source change
          ansible.builtin.apt:
            update_cache: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_update_post_sources
          ignore_errors: yes

        - name: Log APT update issues after source change
          ansible.builtin.debug:
            msg: "APT update failed: {{ apt_update_post_sources.msg | default('Unknown error') }}"
          when: apt_update_post_sources.failed | default(false)

        - name: Run release upgrade (18.04→20.04)
          block:
            - name: Execute upgrade
              ansible.builtin.expect:
                command: do-release-upgrade -f DistUpgradeViewNonInteractive --mode=server
                chdir: /tmp
                responses:
                  ".*": "\n"  # Respond with Enter to any prompt
                timeout: "{{ upgrade_timeout }}"
              environment:
                DEBIAN_FRONTEND: noninteractive
                UCF_FORCE_CONFFNEW: 1
              register: upgrade_result
              changed_when: upgrade_result.rc == 0
              failed_when: upgrade_result.rc != 0 and 'System upgrade is complete' not in upgrade_result.stdout

            - name: Verify upgrade success
              ansible.builtin.fail:
                msg: "Upgrade failed. Check /var/log/dist-upgrade/main.log"
              when: "'System upgrade is complete' not in upgrade_result.stdout"

          rescue:
            - name: Collect failure logs
              ansible.builtin.fetch:
                src: "/var/log/dist-upgrade/main.log"
                dest: "./logs/{{ inventory_hostname }}-upgrade-failure.log"
                flat: yes

        - name: Reboot after upgrade
          ansible.builtin.reboot:
            reboot_timeout: "{{ reboot_timeout }}"

      when: ansible_distribution_version == "18.04"

    # ========== 20.04 → 22.04 UPGRADE PATH ==========
    - block:
        - name: Update package cache
          ansible.builtin.apt:
            update_cache: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_update
          ignore_errors: yes

        - name: Log APT update issues
          ansible.builtin.debug:
            msg: "APT update failed: {{ apt_update.msg | default('Unknown error') }}"
          when: apt_update.failed | default(false)

        - name: Upgrade all packages
          ansible.builtin.apt:
            upgrade: dist
            force_apt_get: yes
            dpkg_options: 'force-confdef,force-confold,force-overwrite'
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_upgrade
          ignore_errors: yes

        - name: Log APT upgrade issues
          ansible.builtin.debug:
            msg: "APT upgrade failed: {{ apt_upgrade.msg | default('Unknown error') }}"
          when: apt_upgrade.failed | default(false)

        - name: Check if reboot is required
          ansible.builtin.stat:
            path: /var/run/reboot-required
          register: reboot_required

        - name: Reboot if required
          ansible.builtin.reboot:
            reboot_timeout: "{{ reboot_timeout }}"
          when: reboot_required.stat.exists or apt_upgrade.changed

        - name: Configure jammy sources
          ansible.builtin.copy:
            content: |
              deb [arch=amd64] {{ repo_url }} jammy main universe
              deb [arch=amd64] {{ repo_url }} jammy-updates main universe
              deb [arch=amd64] {{ repo_url }} jammy-security main universe
            dest: /etc/apt/sources.list

        - name: Update package cache after source change
          ansible.builtin.apt:
            update_cache: yes
          environment:
            DEBIAN_FRONTEND: noninteractive
          register: apt_update_post_sources
          ignore_errors: yes

        - name: Log APT update issues after source change
          ansible.builtin.debug:
            msg: "APT update failed: {{ apt_update_post_sources.msg | default('Unknown error') }}"
          when: apt_update_post_sources.failed | default(false)

        - name: Run release upgrade (20.04→22.04)
          block:
            - name: Execute upgrade
              ansible.builtin.expect:
                command: do-release-upgrade -f DistUpgradeViewNonInteractive --mode=server
                chdir: /tmp
                responses:
                  ".*": "\n"  # Respond with Enter to any prompt
                timeout: "{{ upgrade_timeout }}"
              environment:
                DEBIAN_FRONTEND: noninteractive
                UCF_FORCE_CONFFNEW: 1
              register: upgrade_result
              changed_when: upgrade_result.rc == 0
              failed_when: upgrade_result.rc != 0 and 'System upgrade is complete' not in upgrade_result.stdout

            - name: Verify upgrade success
              ansible.builtin.fail:
                msg: "Upgrade failed. Check /var/log/dist-upgrade/main.log"
              when: "'System upgrade is complete' not in upgrade_result.stdout"

          rescue:
            - name: Collect failure logs
              ansible.builtin.fetch:
                src: "/var/log/dist-upgrade/main.log"
                dest: "./logs/{{ inventory_hostname }}-upgrade-failure.log"
                flat: yes

        - name: Reboot after upgrade
          ansible.builtin.reboot:
            reboot_timeout: "{{ reboot_timeout }}"

      when: ansible_distribution_version == "20.04"

    # ========== POST-UPGRADE VERIFICATION ==========
    - name: Verify final OS version
      ansible.builtin.command: lsb_release -a
      register: final_version
      changed_when: false

    - name: Check package consistency
      ansible.builtin.command: dpkg -C
      register: pkg_check
      ignore_errors: yes

    - name: Final status report
      ansible.builtin.debug:
        msg: |
          Upgrade completed to {{ final_version.stdout }}
          Package issues: {{ pkg_check.stdout_lines | default('None') }}
